/*
A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.
*/
 
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int s =0;
        int e = nums.size() - 1;

        int mid = s + (e-s)/2;

        while(s<=e){
            if(mid<(nums.size()-1) && nums[mid]<nums[mid+1])
                s = mid + 1;
            else if(mid>0 && nums[mid]<nums[mid-1])
                e = mid - 1;
            else
                return mid;
            mid = s + (e-s)/2;
        } 
        return mid; 
    }
};
